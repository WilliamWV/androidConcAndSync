====================================================================================================
=========================================== PHILOSOPHERS ===========================================
====================================================================================================
Repetition 1: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 393.2
Standard deviation: 9.4
Repetition 2: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 404.6
Standard deviation: 2.2
Repetition 3: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 407.6
Standard deviation: 13.0
Repetition 4: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 396.8
Standard deviation: 16.6
Repetition 5: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 398.6
Standard deviation: 9.8
Repetition 6: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 401.8
Standard deviation: 5.8
Repetition 7: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 392.8
Standard deviation: 8.2
Repetition 8: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 399.8
Standard deviation: 3.0
Repetition 9: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 400.8
Standard deviation: 27.4
Repetition 10: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 389.6
Standard deviation: 2.6
Repetition 1: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 602.6
Standard deviation: 25.0
Repetition 2: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 602.0
Standard deviation: 55.2
Repetition 3: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 603.4
Standard deviation: 27.4
Repetition 4: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 602.8
Standard deviation: 7.4
Repetition 5: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 603.0
Standard deviation: 30.8
Repetition 6: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 604.4
Standard deviation: 11.8
Repetition 7: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 599.8
Standard deviation: 27.4
Repetition 8: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 599.2
Standard deviation: 15.4
Repetition 9: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 603.6
Standard deviation: 5.8
Repetition 10: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 592.6
Standard deviation: 20.2
Repetition 1: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 396.6
Standard deviation: 33.0
Repetition 2: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 405.0
Standard deviation: 5.6
Repetition 3: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 397.2
Standard deviation: 15.8
Repetition 4: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 393.4
Standard deviation: 4.2
Repetition 5: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 401.0
Standard deviation: 29.2
Repetition 6: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 394.8
Standard deviation: 5.4
Repetition 7: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 405.4
Standard deviation: 38.6
Repetition 8: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 402.4
Standard deviation: 53.8
Repetition 9: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 401.2
Standard deviation: 5.4
Repetition 10: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 404.6
Standard deviation: 15.0
Repetition 1: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 165.5
Standard deviation: 34.6
Repetition 2: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 164.5
Standard deviation: 26.2
Repetition 3: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 157.9
Standard deviation: 6.6
Repetition 4: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 164.4
Standard deviation: 40.8
Repetition 5: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 159.1
Standard deviation: 9.4
Repetition 6: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 157.9
Standard deviation: 25.5
Repetition 7: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 157.3
Standard deviation: 21.3
Repetition 8: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 159.0
Standard deviation: 18.4
Repetition 9: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 167.1
Standard deviation: 20.3
Repetition 10: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 161.5
Standard deviation: 35.3
Repetition 1: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 240.8
Standard deviation: 35.8
Repetition 2: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 240.2
Standard deviation: 64.3
Repetition 3: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 246.4
Standard deviation: 29.1
Repetition 4: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 247.5
Standard deviation: 39.0
Repetition 5: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 256.2
Standard deviation: 32.9
Repetition 6: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 237.6
Standard deviation: 47.5
Repetition 7: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 261.4
Standard deviation: 34.0
Repetition 8: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 249.7
Standard deviation: 24.0
Repetition 9: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 248.1
Standard deviation: 41.2
Repetition 10: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 256.0
Standard deviation: 33.3
Repetition 1: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 164.6
Standard deviation: 53.1
Repetition 2: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 166.0
Standard deviation: 15.6
Repetition 3: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 160.3
Standard deviation: 20.6
Repetition 4: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 160.7
Standard deviation: 40.7
Repetition 5: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 166.6
Standard deviation: 25.3
Repetition 6: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 159.5
Standard deviation: 25.3
Repetition 7: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 164.4
Standard deviation: 14.2
Repetition 8: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 157.7
Standard deviation: 18.0
Repetition 9: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 161.8
Standard deviation: 31.4
Repetition 10: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 164.7
Standard deviation: 38.4
Repetition 1: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 32.8
Standard deviation: 130.2
Repetition 2: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 36.2
Standard deviation: 290.9
Repetition 3: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 32.5
Standard deviation: 111.9
Repetition 4: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 34.1
Standard deviation: 82.1
Repetition 5: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 34.6
Standard deviation: 203.3
Repetition 6: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 32.8
Standard deviation: 81.6
Repetition 7: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 35.0
Standard deviation: 156.5
Repetition 8: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 35.7
Standard deviation: 255.0
Repetition 9: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 34.5
Standard deviation: 128.4
Repetition 10: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 34.0
Standard deviation: 38.8
Repetition 1: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 46.2
Standard deviation: 1819.1
Repetition 2: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 46.0
Standard deviation: 159.4
Repetition 3: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 47.8
Standard deviation: 293.2
Repetition 4: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 49.0
Standard deviation: 161.1
Repetition 5: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 45.2
Standard deviation: 68.3
Repetition 6: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 43.2
Standard deviation: 32.2
Repetition 7: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 48.3
Standard deviation: 162.3
Repetition 8: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 46.5
Standard deviation: 160.6
Repetition 9: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 50.2
Standard deviation: 277.2
Repetition 10: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 47.4
Standard deviation: 174.8
Repetition 1: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 34.8
Standard deviation: 227.2
Repetition 2: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 34.4
Standard deviation: 51.1
Repetition 3: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 32.5
Standard deviation: 86.3
Repetition 4: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 35.8
Standard deviation: 153.2
Repetition 5: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 32.2
Standard deviation: 147.8
Repetition 6: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 33.3
Standard deviation: 113.0
Repetition 7: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 33.3
Standard deviation: 65.1
Repetition 8: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 35.1
Standard deviation: 233.0
Repetition 9: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 31.6
Standard deviation: 44.6
Repetition 10: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 35.7
Standard deviation: 425.1
Repetition 1: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 394.6
Standard deviation: 8.6
Repetition 2: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 399.8
Standard deviation: 18.6
Repetition 3: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 401.0
Standard deviation: 17.2
Repetition 4: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 402.2
Standard deviation: 6.2
Repetition 5: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 392.4
Standard deviation: 25.8
Repetition 6: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 385.4
Standard deviation: 13.4
Repetition 7: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 401.8
Standard deviation: 3.8
Repetition 8: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 399.0
Standard deviation: 2.8
Repetition 9: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 395.4
Standard deviation: 17.0
Repetition 10: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 396.2
Standard deviation: 35.8
Repetition 1: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 596.8
Standard deviation: 18.6
Repetition 2: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 598.0
Standard deviation: 29.6
Repetition 3: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 589.8
Standard deviation: 15.0
Repetition 4: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 592.8
Standard deviation: 16.6
Repetition 5: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 595.0
Standard deviation: 30.8
Repetition 6: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 595.2
Standard deviation: 27.0
Repetition 7: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 592.0
Standard deviation: 7.2
Repetition 8: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 594.4
Standard deviation: 27.4
Repetition 9: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 592.2
Standard deviation: 41.0
Repetition 10: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 595.4
Standard deviation: 5.4
Repetition 1: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 393.6
Standard deviation: 17.4
Repetition 2: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 396.4
Standard deviation: 33.4
Repetition 3: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 393.0
Standard deviation: 4.4
Repetition 4: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 393.8
Standard deviation: 4.6
Repetition 5: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 399.4
Standard deviation: 1.0
Repetition 6: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 392.4
Standard deviation: 3.4
Repetition 7: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 395.8
Standard deviation: 32.6
Repetition 8: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 397.8
Standard deviation: 5.4
Repetition 9: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 394.4
Standard deviation: 5.4
Repetition 10: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 391.2
Standard deviation: 37.4
Repetition 1: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 170.5
Standard deviation: 14.8
Repetition 2: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 165.1
Standard deviation: 16.8
Repetition 3: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 165.0
Standard deviation: 30.0
Repetition 4: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 160.5
Standard deviation: 24.2
Repetition 5: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 161.5
Standard deviation: 7.9
Repetition 6: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 162.1
Standard deviation: 21.7
Repetition 7: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 164.4
Standard deviation: 21.7
Repetition 8: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 172.9
Standard deviation: 12.3
Repetition 9: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 160.3
Standard deviation: 27.3
Repetition 10: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 166.7
Standard deviation: 18.9
Repetition 1: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 254.5
Standard deviation: 25.5
Repetition 2: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 252.4
Standard deviation: 40.4
Repetition 3: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 244.5
Standard deviation: 28.8
Repetition 4: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 249.6
Standard deviation: 36.6
Repetition 5: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 247.9
Standard deviation: 49.4
Repetition 6: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 247.8
Standard deviation: 50.7
Repetition 7: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 251.8
Standard deviation: 51.2
Repetition 8: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 245.9
Standard deviation: 39.7
Repetition 9: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 252.0
Standard deviation: 51.5
Repetition 10: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 264.2
Standard deviation: 34.7
Repetition 1: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 163.9
Standard deviation: 22.4
Repetition 2: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 155.6
Standard deviation: 44.0
Repetition 3: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 164.4
Standard deviation: 41.3
Repetition 4: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 159.6
Standard deviation: 19.7
Repetition 5: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 171.6
Standard deviation: 11.3
Repetition 6: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 154.0
Standard deviation: 51.8
Repetition 7: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 163.0
Standard deviation: 14.2
Repetition 8: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 164.5
Standard deviation: 29.7
Repetition 9: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 160.4
Standard deviation: 14.6
Repetition 10: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 167.9
Standard deviation: 19.7
Repetition 1: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 32.8
Standard deviation: 100.7
Repetition 2: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 36.2
Standard deviation: 188.3
Repetition 3: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 33.1
Standard deviation: 151.9
Repetition 4: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 32.9
Standard deviation: 296.1
Repetition 5: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 34.5
Standard deviation: 172.7
Repetition 6: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 32.0
Standard deviation: 105.4
Repetition 7: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 35.2
Standard deviation: 165.7
Repetition 8: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 33.9
Standard deviation: 288.4
Repetition 9: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 33.3
Standard deviation: 80.5
Repetition 10: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 35.9
Standard deviation: 150.9
Repetition 1: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 47.5
Standard deviation: 76.6
Repetition 2: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 47.5
Standard deviation: 96.1
Repetition 3: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 45.8
Standard deviation: 83.4
Repetition 4: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 47.8
Standard deviation: 183.7
Repetition 5: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 46.2
Standard deviation: 268.7
Repetition 6: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 45.1
Standard deviation: 91.1
Repetition 7: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 47.4
Standard deviation: 112.7
Repetition 8: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 47.8
Standard deviation: 326.9
Repetition 9: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 53.0
Standard deviation: 3217.7
Repetition 10: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 48.0
Standard deviation: 122.2
Repetition 1: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 32.3
Standard deviation: 168.3
Repetition 2: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 36.1
Standard deviation: 331.5
Repetition 3: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 34.5
Standard deviation: 117.0
Repetition 4: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 34.1
Standard deviation: 94.2
Repetition 5: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 34.7
Standard deviation: 165.5
Repetition 6: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 34.1
Standard deviation: 161.9
Repetition 7: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 35.3
Standard deviation: 154.6
Repetition 8: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 32.5
Standard deviation: 169.7
Repetition 9: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 33.7
Standard deviation: 100.4
Repetition 10: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 34.0
Standard deviation: 98.0
Repetition 1: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 398.0
Standard deviation: 3.2
Repetition 2: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 395.6
Standard deviation: 2.6
Repetition 3: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 393.6
Standard deviation: 10.6
Repetition 4: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 391.8
Standard deviation: 53.4
Repetition 5: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 388.2
Standard deviation: 27.8
Repetition 6: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 395.8
Standard deviation: 1.4
Repetition 7: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 392.6
Standard deviation: 45.0
Repetition 8: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 393.2
Standard deviation: 27.0
Repetition 9: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 392.8
Standard deviation: 1.4
Repetition 10: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 397.6
Standard deviation: 5.8
Repetition 1: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 589.4
Standard deviation: 10.6
Repetition 2: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 592.6
Standard deviation: 12.2
Repetition 3: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 595.8
Standard deviation: 1.0
Repetition 4: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 595.4
Standard deviation: 10.2
Repetition 5: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 588.2
Standard deviation: 24.6
Repetition 6: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 590.6
Standard deviation: 5.8
Repetition 7: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 587.0
Standard deviation: 46.8
Repetition 8: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 598.2
Standard deviation: 36.2
Repetition 9: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 586.2
Standard deviation: 12.2
Repetition 10: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 583.0
Standard deviation: 21.2
Repetition 1: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 387.4
Standard deviation: 1.0
Repetition 2: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 389.6
Standard deviation: 47.4
Repetition 3: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 393.6
Standard deviation: 17.4
Repetition 4: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 401.2
Standard deviation: 1.4
Repetition 5: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 387.0
Standard deviation: 5.2
Repetition 6: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 390.8
Standard deviation: 20.6
Repetition 7: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 395.2
Standard deviation: 17.0
Repetition 8: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 390.8
Standard deviation: 3.0
Repetition 9: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 389.2
Standard deviation: 25.4
Repetition 10: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 393.2
Standard deviation: 20.2
Repetition 1: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 164.8
Standard deviation: 19.6
Repetition 2: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 165.6
Standard deviation: 32.4
Repetition 3: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 155.9
Standard deviation: 16.3
Repetition 4: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 162.5
Standard deviation: 28.8
Repetition 5: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 170.8
Standard deviation: 13.2
Repetition 6: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 164.5
Standard deviation: 26.8
Repetition 7: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 165.4
Standard deviation: 19.1
Repetition 8: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 157.5
Standard deviation: 8.4
Repetition 9: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 156.6
Standard deviation: 22.6
Repetition 10: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 164.8
Standard deviation: 22.5
Repetition 1: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 231.6
Standard deviation: 18.0
Repetition 2: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 249.5
Standard deviation: 32.6
Repetition 3: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 236.8
Standard deviation: 33.2
Repetition 4: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 251.9
Standard deviation: 33.4
Repetition 5: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 248.8
Standard deviation: 43.1
Repetition 6: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 244.5
Standard deviation: 38.2
Repetition 7: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 244.4
Standard deviation: 35.0
Repetition 8: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 251.8
Standard deviation: 27.1
Repetition 9: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 232.2
Standard deviation: 18.7
Repetition 10: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 253.5
Standard deviation: 50.1
Repetition 1: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 159.8
Standard deviation: 17.6
Repetition 2: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 164.7
Standard deviation: 28.2
Repetition 3: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 165.3
Standard deviation: 15.1
Repetition 4: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 158.4
Standard deviation: 20.6
Repetition 5: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 168.8
Standard deviation: 7.1
Repetition 6: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 160.9
Standard deviation: 24.8
Repetition 7: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 162.8
Standard deviation: 16.1
Repetition 8: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 167.3
Standard deviation: 18.4
Repetition 9: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 165.9
Standard deviation: 23.7
Repetition 10: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 165.0
Standard deviation: 14.4
Repetition 1: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 28.6
Standard deviation: 23.5
Repetition 2: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 27.5
Standard deviation: 13.5
Repetition 3: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 28.6
Standard deviation: 11.1
Repetition 4: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 26.9
Standard deviation: 12.7
Repetition 5: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 28.8
Standard deviation: 18.3
Repetition 6: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 29.8
Standard deviation: 17.4
Repetition 7: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 27.9
Standard deviation: 18.5
Repetition 8: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 29.5
Standard deviation: 20.5
Repetition 9: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 27.5
Standard deviation: 12.7
Repetition 10: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 27.5
Standard deviation: 8.8
Repetition 1: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 43.3
Standard deviation: 25.5
Repetition 2: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 44.0
Standard deviation: 659.3
Repetition 3: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 43.0
Standard deviation: 26.6
Repetition 4: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 42.5
Standard deviation: 19.7
Repetition 5: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 44.3
Standard deviation: 25.5
Repetition 6: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 43.0
Standard deviation: 31.4
Repetition 7: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 41.5
Standard deviation: 23.5
Repetition 8: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 40.6
Standard deviation: 26.7
Repetition 9: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 41.4
Standard deviation: 24.0
Repetition 10: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 41.8
Standard deviation: 25.7
Repetition 1: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 27.9
Standard deviation: 16.4
Repetition 2: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 28.6
Standard deviation: 15.3
Repetition 3: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 28.1
Standard deviation: 14.5
Repetition 4: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 27.3
Standard deviation: 73.6
Repetition 5: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 27.5
Standard deviation: 28.6
Repetition 6: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 28.1
Standard deviation: 15.3
Repetition 7: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 27.9
Standard deviation: 20.6
Repetition 8: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 28.7
Standard deviation: 23.0
Repetition 9: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 28.5
Standard deviation: 14.2
Repetition 10: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 29.4
Standard deviation: 19.9
Repetition 1: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 590.0
Standard deviation: 17.6
Repetition 2: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 590.0
Standard deviation: 23.2
Repetition 3: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 587.6
Standard deviation: 11.8
Repetition 4: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 596.4
Standard deviation: 11.4
Repetition 5: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 593.4
Standard deviation: 18.6
Repetition 6: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 585.4
Standard deviation: 3.8
Repetition 7: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 591.0
Standard deviation: 26.8
Repetition 8: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 592.6
Standard deviation: 68.2
Repetition 9: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 590.4
Standard deviation: 16.2
Repetition 10: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 597.2
Standard deviation: 21.8
Repetition 1: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 4072.6
Standard deviation: 3404023.8
Repetition 2: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 4216.8
Standard deviation: 3580057.0
Repetition 3: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 4218.0
Standard deviation: 3672672.0
Repetition 4: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 4383.2
Standard deviation: 3996907.0
Repetition 5: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 3961.8
Standard deviation: 3073237.0
Repetition 6: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 4239.6
Standard deviation: 3641766.6
Repetition 7: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 4310.0
Standard deviation: 3746342.8
Repetition 8: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 4206.8
Standard deviation: 3648572.2
Repetition 9: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 4077.0
Standard deviation: 3664986.4
Repetition 10: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 4143.8
Standard deviation: 3439245.8
Repetition 1: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 590.4
Standard deviation: 2.6
Repetition 2: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 589.0
Standard deviation: 36.8
Repetition 3: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 590.6
Standard deviation: 13.8
Repetition 4: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 587.8
Standard deviation: 14.2
Repetition 5: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 589.2
Standard deviation: 1.4
Repetition 6: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 590.6
Standard deviation: 4.6
Repetition 7: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 585.4
Standard deviation: 3.4
Repetition 8: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 586.8
Standard deviation: 3.0
Repetition 9: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 583.8
Standard deviation: 5.8
Repetition 10: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 583.4
Standard deviation: 29.4
Repetition 1: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 238.8
Standard deviation: 29.1
Repetition 2: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 236.5
Standard deviation: 40.1
Repetition 3: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 238.2
Standard deviation: 29.4
Repetition 4: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 223.8
Standard deviation: 35.1
Repetition 5: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 249.4
Standard deviation: 21.3
Repetition 6: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 237.8
Standard deviation: 16.5
Repetition 7: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 241.7
Standard deviation: 39.7
Repetition 8: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 237.5
Standard deviation: 48.4
Repetition 9: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 244.6
Standard deviation: 11.9
Repetition 10: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 244.6
Standard deviation: 12.0
Repetition 1: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 3575.2
Standard deviation: 1023494.9
Repetition 2: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 3543.2
Standard deviation: 1036777.6
Repetition 3: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 3506.1
Standard deviation: 973378.1
Repetition 4: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 3536.4
Standard deviation: 985533.0
Repetition 5: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 3431.7
Standard deviation: 928671.5
Repetition 6: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 3436.9
Standard deviation: 952575.4
Repetition 7: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 3511.2
Standard deviation: 971005.6
Repetition 8: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 3447.6
Standard deviation: 926976.2
Repetition 9: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 3530.9
Standard deviation: 986334.3
Repetition 10: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 3377.9
Standard deviation: 944974.4
Repetition 1: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 230.4
Standard deviation: 68.8
Repetition 2: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 242.2
Standard deviation: 26.9
Repetition 3: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 252.7
Standard deviation: 30.0
Repetition 4: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 230.7
Standard deviation: 47.7
Repetition 5: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 237.7
Standard deviation: 52.6
Repetition 6: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 222.9
Standard deviation: 53.0
Repetition 7: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 260.9
Standard deviation: 103.5
Repetition 8: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 248.2
Standard deviation: 48.5
Repetition 9: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 236.5
Standard deviation: 28.8
Repetition 10: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 236.8
Standard deviation: 28.7
Repetition 1: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 50.1
Standard deviation: 181.8
Repetition 2: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 48.5
Standard deviation: 167.1
Repetition 3: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 47.1
Standard deviation: 164.3
Repetition 4: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 52.1
Standard deviation: 726.0
Repetition 5: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 48.8
Standard deviation: 146.6
Repetition 6: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 48.9
Standard deviation: 219.5
Repetition 7: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 47.0
Standard deviation: 144.0
Repetition 8: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 46.8
Standard deviation: 160.6
Repetition 9: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 52.0
Standard deviation: 160.5
Repetition 10: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 47.9
Standard deviation: 139.1
Repetition 1: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 930.4
Standard deviation: 28228.6
Repetition 2: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 886.7
Standard deviation: 20480.2
Repetition 3: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 896.3
Standard deviation: 26710.0
Repetition 4: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 920.5
Standard deviation: 22648.1
Repetition 5: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 903.2
Standard deviation: 25533.3
Repetition 6: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 886.5
Standard deviation: 20040.7
Repetition 7: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 898.7
Standard deviation: 30225.9
Repetition 8: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 930.9
Standard deviation: 28563.8
Repetition 9: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 887.3
Standard deviation: 27817.4
Repetition 10: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 898.8
Standard deviation: 28613.9
Repetition 1: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 46.5
Standard deviation: 248.3
Repetition 2: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 49.9
Standard deviation: 189.2
Repetition 3: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 46.1
Standard deviation: 105.0
Repetition 4: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 41.9
Standard deviation: 111.8
Repetition 5: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 36.5
Standard deviation: 331.3
Repetition 6: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 35.3
Standard deviation: 424.5
Repetition 7: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 47.8
Standard deviation: 290.3
Repetition 8: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 49.6
Standard deviation: 149.0
Repetition 9: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 44.3
Standard deviation: 53.8
Repetition 10: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 46.5
Standard deviation: 626.3
====================================================================================================
