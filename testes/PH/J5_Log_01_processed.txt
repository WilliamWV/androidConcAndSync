====================================================================================================
=========================================== PHILOSOPHERS ===========================================
====================================================================================================
Repetition 1: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 366.6; Standard deviation: 7.7
Min: 355; Max: 375
Repetition 2: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 397.8; Standard deviation: 4.7
Min: 390; Max: 403
Repetition 3: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 399.8; Standard deviation: 2.4
Min: 396; Max: 402
Repetition 4: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 399.6; Standard deviation: 2.8
Min: 397; Max: 405
Repetition 5: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 396.8; Standard deviation: 1.2
Min: 395; Max: 398
Repetition 6: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 402.4; Standard deviation: 2.2
Min: 400; Max: 405
Repetition 7: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 405.0; Standard deviation: 3.3
Min: 401; Max: 409
Repetition 8: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 396.0; Standard deviation: 2.4
Min: 393; Max: 400
Repetition 9: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 401.0; Standard deviation: 4.5
Min: 394; Max: 406
Repetition 10: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 403.0; Standard deviation: 2.3
Min: 400; Max: 407
Repetition 1: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 600.0; Standard deviation: 4.0
Min: 595; Max: 607
Repetition 2: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 589.4; Standard deviation: 5.0
Min: 585; Max: 598
Repetition 3: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 597.2; Standard deviation: 7.7
Min: 587; Max: 609
Repetition 4: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 586.8; Standard deviation: 7.1
Min: 573; Max: 592
Repetition 5: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 598.2; Standard deviation: 3.9
Min: 593; Max: 603
Repetition 6: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 595.6; Standard deviation: 3.4
Min: 592; Max: 601
Repetition 7: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 604.8; Standard deviation: 6.4
Min: 594; Max: 613
Repetition 8: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 596.0; Standard deviation: 6.7
Min: 589; Max: 607
Repetition 9: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 598.6; Standard deviation: 7.2
Min: 591; Max: 611
Repetition 10: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 605.0; Standard deviation: 4.7
Min: 598; Max: 611
Repetition 1: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 401.6; Standard deviation: 4.8
Min: 395; Max: 408
Repetition 2: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 401.4; Standard deviation: 5.7
Min: 391; Max: 408
Repetition 3: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 394.6; Standard deviation: 2.0
Min: 391; Max: 396
Repetition 4: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 395.6; Standard deviation: 2.2
Min: 392; Max: 398
Repetition 5: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 395.8; Standard deviation: 3.6
Min: 390; Max: 400
Repetition 6: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 396.0; Standard deviation: 3.6
Min: 390; Max: 401
Repetition 7: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 400.4; Standard deviation: 6.8
Min: 392; Max: 409
Repetition 8: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 403.0; Standard deviation: 4.8
Min: 397; Max: 409
Repetition 9: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 396.2; Standard deviation: 6.9
Min: 385; Max: 403
Repetition 10: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 397.8; Standard deviation: 4.6
Min: 392; Max: 405
Repetition 1: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 164.0; Standard deviation: 2.6
Min: 160; Max: 169
Repetition 2: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 162.0; Standard deviation: 3.2
Min: 156; Max: 167
Repetition 3: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 160.3; Standard deviation: 4.4
Min: 154; Max: 169
Repetition 4: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 176.8; Standard deviation: 7.1
Min: 164; Max: 190
Repetition 5: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 166.8; Standard deviation: 3.1
Min: 158; Max: 170
Repetition 6: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 154.6; Standard deviation: 4.6
Min: 148; Max: 161
Repetition 7: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 160.3; Standard deviation: 4.9
Min: 152; Max: 167
Repetition 8: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 167.8; Standard deviation: 3.1
Min: 163; Max: 173
Repetition 9: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 163.5; Standard deviation: 4.1
Min: 157; Max: 170
Repetition 10: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 160.5; Standard deviation: 3.6
Min: 154; Max: 165
Repetition 1: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 248.7; Standard deviation: 5.6
Min: 240; Max: 262
Repetition 2: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 241.4; Standard deviation: 5.9
Min: 227; Max: 249
Repetition 3: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 256.4; Standard deviation: 3.7
Min: 251; Max: 262
Repetition 4: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 256.6; Standard deviation: 6.6
Min: 248; Max: 271
Repetition 5: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 250.0; Standard deviation: 5.4
Min: 242; Max: 258
Repetition 6: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 240.7; Standard deviation: 6.0
Min: 232; Max: 251
Repetition 7: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 250.5; Standard deviation: 6.1
Min: 242; Max: 262
Repetition 8: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 244.0; Standard deviation: 6.3
Min: 235; Max: 256
Repetition 9: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 245.8; Standard deviation: 8.1
Min: 232; Max: 259
Repetition 10: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 264.5; Standard deviation: 6.0
Min: 257; Max: 274
Repetition 1: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 163.4; Standard deviation: 3.9
Min: 157; Max: 170
Repetition 2: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 169.4; Standard deviation: 4.4
Min: 162; Max: 176
Repetition 3: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 161.5; Standard deviation: 4.0
Min: 156; Max: 167
Repetition 4: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 156.1; Standard deviation: 6.4
Min: 146; Max: 168
Repetition 5: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 164.3; Standard deviation: 4.2
Min: 158; Max: 171
Repetition 6: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 157.6; Standard deviation: 3.7
Min: 152; Max: 165
Repetition 7: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 164.8; Standard deviation: 5.0
Min: 157; Max: 173
Repetition 8: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 168.9; Standard deviation: 4.6
Min: 161; Max: 177
Repetition 9: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 164.8; Standard deviation: 5.5
Min: 155; Max: 174
Repetition 10: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 156.1; Standard deviation: 6.8
Min: 145; Max: 171
Repetition 1: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 34.0; Standard deviation: 8.5
Min: 22; Max: 60
Repetition 2: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 32.7; Standard deviation: 17.6
Min: 19; Max: 111
Repetition 3: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 35.2; Standard deviation: 10.4
Min: 24; Max: 70
Repetition 4: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 29.8; Standard deviation: 11.3
Min: 20; Max: 69
Repetition 5: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 35.6; Standard deviation: 17.7
Min: 20; Max: 101
Repetition 6: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 34.3; Standard deviation: 10.2
Min: 22; Max: 71
Repetition 7: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 34.9; Standard deviation: 12.8
Min: 17; Max: 73
Repetition 8: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 35.0; Standard deviation: 15.0
Min: 16; Max: 89
Repetition 9: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 32.3; Standard deviation: 8.9
Min: 22; Max: 68
Repetition 10: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 35.3; Standard deviation: 11.3
Min: 19; Max: 70
Repetition 1: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 46.1; Standard deviation: 8.9
Min: 28; Max: 75
Repetition 2: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 45.6; Standard deviation: 11.4
Min: 33; Max: 92
Repetition 3: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 48.3; Standard deviation: 13.3
Min: 31; Max: 94
Repetition 4: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 46.7; Standard deviation: 6.9
Min: 33; Max: 65
Repetition 5: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 47.8; Standard deviation: 14.9
Min: 25; Max: 88
Repetition 6: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 51.2; Standard deviation: 46.2
Min: 13; Max: 178
Repetition 7: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 47.9; Standard deviation: 11.3
Min: 33; Max: 85
Repetition 8: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 44.6; Standard deviation: 8.4
Min: 33; Max: 79
Repetition 9: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 44.5; Standard deviation: 7.7
Min: 32; Max: 74
Repetition 10: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 51.0; Standard deviation: 13.5
Min: 35; Max: 101
Repetition 1: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 28.0; Standard deviation: 21.1
Min: 14; Max: 125
Repetition 2: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 31.9; Standard deviation: 11.0
Min: 19; Max: 65
Repetition 3: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 34.5; Standard deviation: 10.9
Min: 24; Max: 80
Repetition 4: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 34.5; Standard deviation: 11.2
Min: 22; Max: 75
Repetition 5: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 34.7; Standard deviation: 9.2
Min: 22; Max: 60
Repetition 6: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 34.3; Standard deviation: 26.8
Min: 14; Max: 143
Repetition 7: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 34.9; Standard deviation: 11.0
Min: 23; Max: 78
Repetition 8: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 34.8; Standard deviation: 15.9
Min: 19; Max: 83
Repetition 9: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 35.1; Standard deviation: 15.1
Min: 18; Max: 93
Repetition 10: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 32.7; Standard deviation: 8.2
Min: 24; Max: 61
Repetition 1: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 396.6; Standard deviation: 4.9
Min: 391; Max: 403
Repetition 2: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 397.0; Standard deviation: 2.6
Min: 392; Max: 399
Repetition 3: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 396.8; Standard deviation: 5.9
Min: 387; Max: 405
Repetition 4: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 392.8; Standard deviation: 3.4
Min: 388; Max: 397
Repetition 5: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 393.2; Standard deviation: 7.0
Min: 385; Max: 403
Repetition 6: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 388.8; Standard deviation: 4.5
Min: 382; Max: 393
Repetition 7: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 397.8; Standard deviation: 4.1
Min: 394; Max: 405
Repetition 8: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 395.4; Standard deviation: 8.5
Min: 386; Max: 406
Repetition 9: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 395.4; Standard deviation: 2.7
Min: 391; Max: 399
Repetition 10: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 396.0; Standard deviation: 3.3
Min: 391; Max: 400
Repetition 1: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 596.8; Standard deviation: 3.2
Min: 593; Max: 602
Repetition 2: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 594.2; Standard deviation: 8.3
Min: 584; Max: 608
Repetition 3: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 601.2; Standard deviation: 4.8
Min: 597; Max: 608
Repetition 4: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 590.6; Standard deviation: 3.5
Min: 587; Max: 596
Repetition 5: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 594.8; Standard deviation: 2.6
Min: 590; Max: 597
Repetition 6: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 601.8; Standard deviation: 5.9
Min: 592; Max: 607
Repetition 7: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 597.2; Standard deviation: 5.0
Min: 591; Max: 604
Repetition 8: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 601.0; Standard deviation: 5.4
Min: 595; Max: 611
Repetition 9: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 600.6; Standard deviation: 2.6
Min: 598; Max: 605
Repetition 10: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 597.4; Standard deviation: 7.3
Min: 586; Max: 605
Repetition 1: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 397.4; Standard deviation: 1.0
Min: 396; Max: 399
Repetition 2: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 397.4; Standard deviation: 1.4
Min: 395; Max: 399
Repetition 3: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 402.8; Standard deviation: 2.1
Min: 399; Max: 405
Repetition 4: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 404.8; Standard deviation: 1.3
Min: 403; Max: 407
Repetition 5: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 395.4; Standard deviation: 5.8
Min: 386; Max: 404
Repetition 6: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 394.0; Standard deviation: 4.2
Min: 389; Max: 399
Repetition 7: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 396.0; Standard deviation: 2.9
Min: 392; Max: 401
Repetition 8: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 398.4; Standard deviation: 1.4
Min: 397; Max: 401
Repetition 9: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 395.2; Standard deviation: 4.3
Min: 389; Max: 401
Repetition 10: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 395.6; Standard deviation: 2.7
Min: 392; Max: 400
Repetition 1: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 168.8; Standard deviation: 5.0
Min: 162; Max: 179
Repetition 2: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 159.2; Standard deviation: 4.3
Min: 153; Max: 169
Repetition 3: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 168.1; Standard deviation: 4.8
Min: 161; Max: 178
Repetition 4: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 156.3; Standard deviation: 3.2
Min: 150; Max: 161
Repetition 5: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 159.1; Standard deviation: 5.5
Min: 150; Max: 170
Repetition 6: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 157.8; Standard deviation: 7.6
Min: 148; Max: 172
Repetition 7: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 159.5; Standard deviation: 3.9
Min: 155; Max: 166
Repetition 8: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 162.7; Standard deviation: 4.8
Min: 152; Max: 172
Repetition 9: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 165.5; Standard deviation: 4.8
Min: 159; Max: 174
Repetition 10: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 161.0; Standard deviation: 3.3
Min: 157; Max: 167
Repetition 1: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 235.8; Standard deviation: 4.1
Min: 229; Max: 242
Repetition 2: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 239.6; Standard deviation: 4.0
Min: 232; Max: 247
Repetition 3: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 253.8; Standard deviation: 6.4
Min: 241; Max: 264
Repetition 4: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 253.2; Standard deviation: 5.8
Min: 248; Max: 269
Repetition 5: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 240.8; Standard deviation: 4.6
Min: 228; Max: 247
Repetition 6: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 247.0; Standard deviation: 7.4
Min: 237; Max: 261
Repetition 7: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 252.9; Standard deviation: 5.8
Min: 245; Max: 269
Repetition 8: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 239.9; Standard deviation: 4.5
Min: 232; Max: 247
Repetition 9: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 244.4; Standard deviation: 7.5
Min: 233; Max: 259
Repetition 10: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 251.5; Standard deviation: 4.3
Min: 243; Max: 260
Repetition 1: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 147.8; Standard deviation: 4.7
Min: 143; Max: 157
Repetition 2: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 156.4; Standard deviation: 5.9
Min: 148; Max: 166
Repetition 3: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 158.5; Standard deviation: 4.4
Min: 152; Max: 168
Repetition 4: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 157.6; Standard deviation: 4.4
Min: 153; Max: 168
Repetition 5: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 159.1; Standard deviation: 6.5
Min: 149; Max: 171
Repetition 6: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 170.5; Standard deviation: 3.5
Min: 165; Max: 176
Repetition 7: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 164.1; Standard deviation: 5.2
Min: 156; Max: 171
Repetition 8: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 166.3; Standard deviation: 4.8
Min: 156; Max: 174
Repetition 9: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 170.1; Standard deviation: 5.6
Min: 162; Max: 179
Repetition 10: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 152.6; Standard deviation: 5.8
Min: 142; Max: 161
Repetition 1: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 36.1; Standard deviation: 10.0
Min: 25; Max: 73
Repetition 2: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 33.2; Standard deviation: 20.2
Min: 15; Max: 110
Repetition 3: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 33.7; Standard deviation: 12.5
Min: 22; Max: 77
Repetition 4: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 35.4; Standard deviation: 8.9
Min: 24; Max: 66
Repetition 5: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 35.1; Standard deviation: 12.8
Min: 22; Max: 74
Repetition 6: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 35.4; Standard deviation: 25.2
Min: 14; Max: 134
Repetition 7: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 33.7; Standard deviation: 12.6
Min: 20; Max: 82
Repetition 8: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 33.6; Standard deviation: 10.8
Min: 22; Max: 73
Repetition 9: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 32.7; Standard deviation: 7.8
Min: 20; Max: 58
Repetition 10: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 32.0; Standard deviation: 17.7
Min: 15; Max: 104
Repetition 1: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 47.6; Standard deviation: 10.5
Min: 32; Max: 86
Repetition 2: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 49.3; Standard deviation: 11.9
Min: 30; Max: 81
Repetition 3: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 44.3; Standard deviation: 9.3
Min: 32; Max: 83
Repetition 4: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 50.5; Standard deviation: 24.6
Min: 19; Max: 113
Repetition 5: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 46.2; Standard deviation: 9.3
Min: 33; Max: 78
Repetition 6: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 48.2; Standard deviation: 17.3
Min: 24; Max: 121
Repetition 7: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 49.2; Standard deviation: 11.0
Min: 35; Max: 87
Repetition 8: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 47.1; Standard deviation: 9.7
Min: 36; Max: 79
Repetition 9: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 46.2; Standard deviation: 10.3
Min: 32; Max: 88
Repetition 10: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 46.3; Standard deviation: 10.8
Min: 33; Max: 76
Repetition 1: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 34.3; Standard deviation: 11.6
Min: 21; Max: 67
Repetition 2: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 35.9; Standard deviation: 16.2
Min: 23; Max: 102
Repetition 3: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 33.8; Standard deviation: 11.4
Min: 21; Max: 79
Repetition 4: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 33.5; Standard deviation: 10.0
Min: 20; Max: 71
Repetition 5: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 35.2; Standard deviation: 15.3
Min: 21; Max: 83
Repetition 6: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 34.7; Standard deviation: 11.8
Min: 19; Max: 83
Repetition 7: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 33.2; Standard deviation: 6.9
Min: 22; Max: 59
Repetition 8: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 31.8; Standard deviation: 9.4
Min: 22; Max: 64
Repetition 9: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 33.5; Standard deviation: 10.2
Min: 21; Max: 69
Repetition 10: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 34.0; Standard deviation: 12.3
Min: 22; Max: 74
Repetition 1: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 399.8; Standard deviation: 4.7
Min: 394; Max: 406
Repetition 2: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 393.8; Standard deviation: 2.7
Min: 391; Max: 398
Repetition 3: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 397.2; Standard deviation: 4.5
Min: 392; Max: 403
Repetition 4: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 396.4; Standard deviation: 1.9
Min: 394; Max: 399
Repetition 5: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 395.4; Standard deviation: 4.7
Min: 387; Max: 401
Repetition 6: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 397.4; Standard deviation: 2.2
Min: 394; Max: 400
Repetition 7: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 402.6; Standard deviation: 2.3
Min: 399; Max: 406
Repetition 8: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 394.4; Standard deviation: 2.6
Min: 391; Max: 399
Repetition 9: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 393.8; Standard deviation: 2.4
Min: 391; Max: 398
Repetition 10: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 396.2; Standard deviation: 3.3
Min: 392; Max: 401
Repetition 1: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 592.4; Standard deviation: 2.9
Min: 589; Max: 596
Repetition 2: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 588.8; Standard deviation: 6.0
Min: 580; Max: 594
Repetition 3: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 592.4; Standard deviation: 5.6
Min: 586; Max: 600
Repetition 4: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 589.0; Standard deviation: 3.4
Min: 583; Max: 593
Repetition 5: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 588.2; Standard deviation: 1.9
Min: 587; Max: 592
Repetition 6: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 594.0; Standard deviation: 7.0
Min: 582; Max: 603
Repetition 7: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 597.2; Standard deviation: 4.2
Min: 590; Max: 603
Repetition 8: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 595.8; Standard deviation: 4.7
Min: 590; Max: 602
Repetition 9: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 482.4; Standard deviation: 10.8
Min: 467; Max: 498
Repetition 10: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 579.2; Standard deviation: 4.9
Min: 571; Max: 585
Repetition 1: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 395.6; Standard deviation: 3.4
Min: 392; Max: 400
Repetition 2: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 390.0; Standard deviation: 2.2
Min: 387; Max: 393
Repetition 3: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 391.2; Standard deviation: 3.3
Min: 386; Max: 395
Repetition 4: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 399.0; Standard deviation: 1.9
Min: 397; Max: 402
Repetition 5: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 393.2; Standard deviation: 3.2
Min: 389; Max: 397
Repetition 6: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 396.6; Standard deviation: 2.7
Min: 394; Max: 401
Repetition 7: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 396.4; Standard deviation: 1.7
Min: 394; Max: 399
Repetition 8: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 394.4; Standard deviation: 2.2
Min: 392; Max: 398
Repetition 9: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 399.6; Standard deviation: 2.9
Min: 397; Max: 404
Repetition 10: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 393.8; Standard deviation: 2.2
Min: 392; Max: 398
Repetition 1: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 159.6; Standard deviation: 5.1
Min: 151; Max: 169
Repetition 2: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 165.1; Standard deviation: 3.6
Min: 159; Max: 171
Repetition 3: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 161.3; Standard deviation: 3.7
Min: 155; Max: 167
Repetition 4: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 157.7; Standard deviation: 4.1
Min: 151; Max: 164
Repetition 5: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 162.0; Standard deviation: 3.5
Min: 158; Max: 169
Repetition 6: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 165.5; Standard deviation: 4.8
Min: 157; Max: 175
Repetition 7: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 167.8; Standard deviation: 4.1
Min: 160; Max: 174
Repetition 8: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 151.1; Standard deviation: 6.2
Min: 141; Max: 160
Repetition 9: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 152.4; Standard deviation: 5.9
Min: 140; Max: 162
Repetition 10: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 155.5; Standard deviation: 5.0
Min: 146; Max: 163
Repetition 1: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 231.0; Standard deviation: 6.3
Min: 220; Max: 240
Repetition 2: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 244.7; Standard deviation: 4.4
Min: 238; Max: 253
Repetition 3: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 240.7; Standard deviation: 4.3
Min: 235; Max: 252
Repetition 4: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 254.1; Standard deviation: 5.4
Min: 240; Max: 261
Repetition 5: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 247.0; Standard deviation: 8.7
Min: 233; Max: 264
Repetition 6: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 250.7; Standard deviation: 4.8
Min: 242; Max: 257
Repetition 7: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 241.8; Standard deviation: 5.0
Min: 232; Max: 251
Repetition 8: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 241.6; Standard deviation: 7.7
Min: 228; Max: 251
Repetition 9: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 255.6; Standard deviation: 5.8
Min: 248; Max: 266
Repetition 10: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 248.0; Standard deviation: 5.8
Min: 239; Max: 257
Repetition 1: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 151.8; Standard deviation: 2.8
Min: 145; Max: 156
Repetition 2: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 162.5; Standard deviation: 5.1
Min: 156; Max: 176
Repetition 3: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 159.7; Standard deviation: 5.0
Min: 153; Max: 171
Repetition 4: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 161.7; Standard deviation: 6.2
Min: 150; Max: 173
Repetition 5: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 154.9; Standard deviation: 5.6
Min: 145; Max: 167
Repetition 6: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 159.3; Standard deviation: 5.0
Min: 151; Max: 168
Repetition 7: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 160.7; Standard deviation: 3.9
Min: 155; Max: 168
Repetition 8: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 160.1; Standard deviation: 4.9
Min: 155; Max: 171
Repetition 9: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 147.1; Standard deviation: 3.7
Min: 143; Max: 154
Repetition 10: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 158.3; Standard deviation: 3.7
Min: 152; Max: 163
Repetition 1: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 26.9; Standard deviation: 4.5
Min: 18; Max: 40
Repetition 2: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 28.5; Standard deviation: 3.6
Min: 21; Max: 35
Repetition 3: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 28.0; Standard deviation: 3.4
Min: 21; Max: 37
Repetition 4: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 26.8; Standard deviation: 4.2
Min: 18; Max: 36
Repetition 5: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 29.3; Standard deviation: 4.3
Min: 21; Max: 41
Repetition 6: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 29.3; Standard deviation: 3.9
Min: 21; Max: 39
Repetition 7: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 28.3; Standard deviation: 11.0
Min: 15; Max: 55
Repetition 8: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 28.7; Standard deviation: 4.2
Min: 21; Max: 36
Repetition 9: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 29.1; Standard deviation: 4.1
Min: 21; Max: 40
Repetition 10: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 28.3; Standard deviation: 3.0
Min: 22; Max: 35
Repetition 1: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 39.4; Standard deviation: 5.4
Min: 25; Max: 52
Repetition 2: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 40.0; Standard deviation: 4.7
Min: 30; Max: 50
Repetition 3: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 41.4; Standard deviation: 4.2
Min: 33; Max: 51
Repetition 4: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 41.0; Standard deviation: 4.0
Min: 33; Max: 50
Repetition 5: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 43.6; Standard deviation: 5.6
Min: 33; Max: 58
Repetition 6: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 40.8; Standard deviation: 5.3
Min: 31; Max: 57
Repetition 7: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 41.0; Standard deviation: 8.7
Min: 26; Max: 73
Repetition 8: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 42.4; Standard deviation: 4.6
Min: 32; Max: 54
Repetition 9: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 41.9; Standard deviation: 4.5
Min: 33; Max: 54
Repetition 10: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 38.6; Standard deviation: 5.3
Min: 27; Max: 50
Repetition 1: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 27.8; Standard deviation: 4.0
Min: 20; Max: 35
Repetition 2: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 27.8; Standard deviation: 4.6
Min: 19; Max: 40
Repetition 3: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 28.9; Standard deviation: 4.3
Min: 21; Max: 39
Repetition 4: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 29.1; Standard deviation: 4.4
Min: 21; Max: 39
Repetition 5: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 27.7; Standard deviation: 3.7
Min: 22; Max: 38
Repetition 6: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 27.2; Standard deviation: 4.4
Min: 18; Max: 37
Repetition 7: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 28.6; Standard deviation: 3.9
Min: 18; Max: 38
Repetition 8: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 29.5; Standard deviation: 4.6
Min: 19; Max: 41
Repetition 9: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 25.7; Standard deviation: 3.5
Min: 19; Max: 36
Repetition 10: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 29.0; Standard deviation: 4.2
Min: 20; Max: 39
Repetition 1: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 554.8; Standard deviation: 7.1
Min: 542; Max: 562
Repetition 2: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 561.8; Standard deviation: 3.9
Min: 555; Max: 565
Repetition 3: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 551.8; Standard deviation: 2.9
Min: 547; Max: 555
Repetition 4: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 561.6; Standard deviation: 3.1
Min: 557; Max: 566
Repetition 5: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 561.4; Standard deviation: 3.5
Min: 557; Max: 566
Repetition 6: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 557.2; Standard deviation: 4.8
Min: 552; Max: 564
Repetition 7: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 562.8; Standard deviation: 3.2
Min: 557; Max: 567
Repetition 8: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 551.4; Standard deviation: 8.2
Min: 540; Max: 563
Repetition 9: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 548.6; Standard deviation: 4.8
Min: 540; Max: 553
Repetition 10: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 557.0; Standard deviation: 6.3
Min: 549; Max: 565
Repetition 1: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 3893.0; Standard deviation: 1754.6
Min: 539; Max: 5647
Repetition 2: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 3881.2; Standard deviation: 1720.3
Min: 549; Max: 5330
Repetition 3: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 4202.4; Standard deviation: 1916.3
Min: 537; Max: 5890
Repetition 4: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 4107.6; Standard deviation: 1838.2
Min: 536; Max: 5670
Repetition 5: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 4138.6; Standard deviation: 1869.5
Min: 546; Max: 5851
Repetition 6: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 4038.6; Standard deviation: 1847.9
Min: 525; Max: 5783
Repetition 7: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 4090.4; Standard deviation: 1861.5
Min: 542; Max: 5976
Repetition 8: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 4293.8; Standard deviation: 2035.9
Min: 535; Max: 6088
Repetition 9: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 4003.4; Standard deviation: 1811.9
Min: 537; Max: 5622
Repetition 10: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 4047.4; Standard deviation: 1842.4
Min: 533; Max: 5854
Repetition 1: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 555.6; Standard deviation: 3.9
Min: 548; Max: 559
Repetition 2: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 560.2; Standard deviation: 4.8
Min: 553; Max: 567
Repetition 3: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 555.0; Standard deviation: 3.7
Min: 549; Max: 560
Repetition 4: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 554.2; Standard deviation: 2.7
Min: 550; Max: 558
Repetition 5: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 561.6; Standard deviation: 2.9
Min: 558; Max: 566
Repetition 6: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 552.0; Standard deviation: 8.7
Min: 539; Max: 560
Repetition 7: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 558.6; Standard deviation: 2.4
Min: 555; Max: 562
Repetition 8: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 553.6; Standard deviation: 3.6
Min: 548; Max: 557
Repetition 9: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 558.4; Standard deviation: 3.4
Min: 554; Max: 563
Repetition 10: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 556.4; Standard deviation: 2.6
Min: 552; Max: 560
Repetition 1: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 239.4; Standard deviation: 4.9
Min: 231; Max: 248
Repetition 2: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 240.0; Standard deviation: 7.4
Min: 228; Max: 251
Repetition 3: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 230.3; Standard deviation: 4.7
Min: 223; Max: 240
Repetition 4: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 236.9; Standard deviation: 5.1
Min: 230; Max: 250
Repetition 5: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 233.2; Standard deviation: 7.3
Min: 221; Max: 244
Repetition 6: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 226.9; Standard deviation: 5.0
Min: 217; Max: 233
Repetition 7: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 233.2; Standard deviation: 7.3
Min: 224; Max: 248
Repetition 8: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 238.4; Standard deviation: 4.3
Min: 233; Max: 245
Repetition 9: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 233.6; Standard deviation: 6.9
Min: 221; Max: 246
Repetition 10: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 235.5; Standard deviation: 6.1
Min: 227; Max: 245
Repetition 1: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 3357.5; Standard deviation: 946.1
Min: 452; Max: 4315
Repetition 2: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 3369.9; Standard deviation: 971.8
Min: 440; Max: 4529
Repetition 3: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 3365.5; Standard deviation: 943.0
Min: 456; Max: 4104
Repetition 4: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 3365.5; Standard deviation: 937.7
Min: 452; Max: 4026
Repetition 5: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 3273.0; Standard deviation: 939.7
Min: 428; Max: 4331
Repetition 6: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 3339.6; Standard deviation: 933.2
Min: 457; Max: 4178
Repetition 7: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 3252.2; Standard deviation: 917.4
Min: 444; Max: 4217
Repetition 8: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 3217.6; Standard deviation: 904.8
Min: 432; Max: 3955
Repetition 9: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 3273.3; Standard deviation: 927.7
Min: 450; Max: 4181
Repetition 10: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 3245.5; Standard deviation: 911.8
Min: 449; Max: 4189
Repetition 1: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 236.9; Standard deviation: 5.9
Min: 228; Max: 248
Repetition 2: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 233.0; Standard deviation: 5.8
Min: 222; Max: 244
Repetition 3: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 227.2; Standard deviation: 5.8
Min: 215; Max: 239
Repetition 4: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 223.4; Standard deviation: 3.7
Min: 217; Max: 229
Repetition 5: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 229.9; Standard deviation: 6.6
Min: 218; Max: 238
Repetition 6: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 239.5; Standard deviation: 6.5
Min: 231; Max: 250
Repetition 7: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 231.9; Standard deviation: 5.1
Min: 226; Max: 244
Repetition 8: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 245.6; Standard deviation: 5.8
Min: 236; Max: 256
Repetition 9: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 227.5; Standard deviation: 5.3
Min: 215; Max: 234
Repetition 10: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 232.2; Standard deviation: 6.7
Min: 220; Max: 243
Repetition 1: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 48.7; Standard deviation: 11.4
Min: 33; Max: 97
Repetition 2: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 47.4; Standard deviation: 10.2
Min: 31; Max: 84
Repetition 3: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 50.1; Standard deviation: 24.3
Min: 29; Max: 123
Repetition 4: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 49.1; Standard deviation: 14.5
Min: 32; Max: 89
Repetition 5: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 49.8; Standard deviation: 15.8
Min: 31; Max: 122
Repetition 6: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 47.7; Standard deviation: 12.5
Min: 32; Max: 96
Repetition 7: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 46.7; Standard deviation: 10.1
Min: 34; Max: 95
Repetition 8: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 48.2; Standard deviation: 15.2
Min: 33; Max: 128
Repetition 9: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 51.8; Standard deviation: 31.3
Min: 26; Max: 131
Repetition 10: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 47.0; Standard deviation: 11.3
Min: 29; Max: 92
Repetition 1: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 870.6; Standard deviation: 148.4
Min: 111; Max: 1160
Repetition 2: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 843.1; Standard deviation: 152.0
Min: 112; Max: 1359
Repetition 3: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 869.6; Standard deviation: 151.1
Min: 106; Max: 1213
Repetition 4: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 862.5; Standard deviation: 179.9
Min: 118; Max: 1383
Repetition 5: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 849.3; Standard deviation: 152.4
Min: 105; Max: 1185
Repetition 6: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 865.9; Standard deviation: 168.3
Min: 117; Max: 1341
Repetition 7: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 844.3; Standard deviation: 134.6
Min: 118; Max: 1184
Repetition 8: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 853.6; Standard deviation: 155.8
Min: 110; Max: 1215
Repetition 9: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 974.5; Standard deviation: 163.6
Min: 140; Max: 1449
Repetition 10: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 877.2; Standard deviation: 150.4
Min: 141; Max: 1366
Repetition 1: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 47.0; Standard deviation: 11.8
Min: 35; Max: 90
Repetition 2: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 47.8; Standard deviation: 24.1
Min: 18; Max: 117
Repetition 3: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 45.8; Standard deviation: 11.4
Min: 28; Max: 82
Repetition 4: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 45.2; Standard deviation: 11.3
Min: 30; Max: 79
Repetition 5: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 45.1; Standard deviation: 10.7
Min: 28; Max: 79
Repetition 6: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 46.3; Standard deviation: 10.8
Min: 32; Max: 83
Repetition 7: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 44.4; Standard deviation: 7.4
Min: 33; Max: 70
Repetition 8: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 44.3; Standard deviation: 13.4
Min: 30; Max: 92
Repetition 9: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 46.2; Standard deviation: 17.5
Min: 17; Max: 85
Repetition 10: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 42.5; Standard deviation: 9.0
Min: 28; Max: 81
====================================================================================================
