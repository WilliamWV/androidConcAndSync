====================================================================================================
=========================================== PHILOSOPHERS ===========================================
====================================================================================================
Repetition 1: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 402.0; Standard deviation: 3.3
Min: 396; Max: 406
Repetition 2: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 398.2; Standard deviation: 1.3
Min: 396; Max: 400
Repetition 3: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 400.2; Standard deviation: 4.3
Min: 395; Max: 407
Repetition 4: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 400.0; Standard deviation: 1.7
Min: 398; Max: 402
Repetition 5: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 359.8; Standard deviation: 4.4
Min: 352; Max: 365
Repetition 6: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 248.0; Standard deviation: 13.3
Min: 223; Max: 263
Repetition 7: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 309.2; Standard deviation: 8.0
Min: 295; Max: 320
Repetition 8: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 307.4; Standard deviation: 16.6
Min: 280; Max: 332
Repetition 9: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 383.2; Standard deviation: 5.2
Min: 376; Max: 390
Repetition 10: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 371.0; Standard deviation: 3.2
Min: 367; Max: 376
Repetition 1: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 604.2; Standard deviation: 2.5
Min: 602; Max: 609
Repetition 2: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 600.8; Standard deviation: 4.1
Min: 596; Max: 608
Repetition 3: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 598.0; Standard deviation: 5.1
Min: 592; Max: 604
Repetition 4: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 599.2; Standard deviation: 3.5
Min: 594; Max: 603
Repetition 5: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 600.2; Standard deviation: 5.6
Min: 596; Max: 610
Repetition 6: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 604.0; Standard deviation: 2.8
Min: 600; Max: 608
Repetition 7: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 599.8; Standard deviation: 4.9
Min: 594; Max: 607
Repetition 8: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 604.8; Standard deviation: 4.7
Min: 601; Max: 614
Repetition 9: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 606.4; Standard deviation: 2.9
Min: 601; Max: 609
Repetition 10: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 606.2; Standard deviation: 6.1
Min: 598; Max: 614
Repetition 1: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 387.0; Standard deviation: 6.7
Min: 378; Max: 397
Repetition 2: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 398.4; Standard deviation: 3.2
Min: 393; Max: 403
Repetition 3: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 400.8; Standard deviation: 1.9
Min: 397; Max: 402
Repetition 4: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 402.4; Standard deviation: 5.4
Min: 398; Max: 413
Repetition 5: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 397.6; Standard deviation: 4.6
Min: 390; Max: 404
Repetition 6: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 401.0; Standard deviation: 2.8
Min: 397; Max: 405
Repetition 7: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 390.8; Standard deviation: 3.7
Min: 385; Max: 396
Repetition 8: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 401.0; Standard deviation: 7.9
Min: 393; Max: 411
Repetition 9: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 394.0; Standard deviation: 4.9
Min: 385; Max: 398
Repetition 10: Report execution of Threads implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 400.8; Standard deviation: 2.3
Min: 397; Max: 404
Repetition 1: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 156.4; Standard deviation: 3.5
Min: 151; Max: 162
Repetition 2: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 165.5; Standard deviation: 4.3
Min: 158; Max: 171
Repetition 3: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 164.8; Standard deviation: 3.1
Min: 158; Max: 168
Repetition 4: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 158.9; Standard deviation: 4.9
Min: 150; Max: 166
Repetition 5: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 161.4; Standard deviation: 3.3
Min: 157; Max: 169
Repetition 6: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 169.8; Standard deviation: 6.2
Min: 160; Max: 180
Repetition 7: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 158.1; Standard deviation: 5.4
Min: 149; Max: 168
Repetition 8: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 167.7; Standard deviation: 4.6
Min: 159; Max: 178
Repetition 9: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 159.5; Standard deviation: 5.0
Min: 153; Max: 171
Repetition 10: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 152.5; Standard deviation: 3.1
Min: 148; Max: 159
Repetition 1: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 236.2; Standard deviation: 5.0
Min: 227; Max: 244
Repetition 2: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 252.5; Standard deviation: 5.9
Min: 241; Max: 260
Repetition 3: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 255.7; Standard deviation: 4.6
Min: 249; Max: 263
Repetition 4: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 243.0; Standard deviation: 7.2
Min: 228; Max: 255
Repetition 5: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 242.7; Standard deviation: 4.0
Min: 238; Max: 251
Repetition 6: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 243.1; Standard deviation: 9.5
Min: 221; Max: 258
Repetition 7: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 251.6; Standard deviation: 5.4
Min: 242; Max: 261
Repetition 8: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 239.0; Standard deviation: 7.5
Min: 230; Max: 253
Repetition 9: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 244.7; Standard deviation: 6.7
Min: 235; Max: 262
Repetition 10: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 245.3; Standard deviation: 5.5
Min: 237; Max: 255
Repetition 1: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 163.3; Standard deviation: 4.3
Min: 155; Max: 171
Repetition 2: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 152.1; Standard deviation: 5.2
Min: 144; Max: 161
Repetition 3: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 148.8; Standard deviation: 4.4
Min: 140; Max: 156
Repetition 4: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 156.5; Standard deviation: 5.0
Min: 147; Max: 168
Repetition 5: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 153.3; Standard deviation: 2.4
Min: 150; Max: 158
Repetition 6: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 143.5; Standard deviation: 3.0
Min: 138; Max: 148
Repetition 7: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 164.5; Standard deviation: 5.4
Min: 157; Max: 174
Repetition 8: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 153.7; Standard deviation: 4.2
Min: 146; Max: 161
Repetition 9: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 155.5; Standard deviation: 5.2
Min: 145; Max: 164
Repetition 10: Report execution of Threads implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 158.7; Standard deviation: 4.5
Min: 152; Max: 167
Repetition 1: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 30.6; Standard deviation: 7.9
Min: 20; Max: 58
Repetition 2: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 33.9; Standard deviation: 8.9
Min: 21; Max: 61
Repetition 3: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 30.0; Standard deviation: 10.0
Min: 17; Max: 69
Repetition 4: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 32.9; Standard deviation: 6.8
Min: 23; Max: 62
Repetition 5: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 35.4; Standard deviation: 10.8
Min: 24; Max: 74
Repetition 6: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 32.4; Standard deviation: 8.0
Min: 21; Max: 56
Repetition 7: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 32.3; Standard deviation: 14.4
Min: 19; Max: 80
Repetition 8: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 34.2; Standard deviation: 10.4
Min: 20; Max: 64
Repetition 9: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 33.7; Standard deviation: 13.2
Min: 14; Max: 71
Repetition 10: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 35.7; Standard deviation: 10.9
Min: 22; Max: 68
Repetition 1: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 44.6; Standard deviation: 8.4
Min: 33; Max: 66
Repetition 2: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 47.6; Standard deviation: 11.9
Min: 35; Max: 88
Repetition 3: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 50.5; Standard deviation: 35.9
Min: 16; Max: 129
Repetition 4: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 47.5; Standard deviation: 11.4
Min: 30; Max: 84
Repetition 5: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 48.6; Standard deviation: 14.4
Min: 32; Max: 98
Repetition 6: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 46.5; Standard deviation: 10.5
Min: 28; Max: 81
Repetition 7: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 46.6; Standard deviation: 9.0
Min: 35; Max: 82
Repetition 8: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 46.0; Standard deviation: 9.7
Min: 34; Max: 76
Repetition 9: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 45.1; Standard deviation: 11.1
Min: 29; Max: 94
Repetition 10: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 45.9; Standard deviation: 9.6
Min: 37; Max: 83
Repetition 1: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 33.5; Standard deviation: 10.8
Min: 20; Max: 69
Repetition 2: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 34.6; Standard deviation: 9.1
Min: 23; Max: 64
Repetition 3: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 35.5; Standard deviation: 10.8
Min: 22; Max: 69
Repetition 4: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 33.8; Standard deviation: 19.9
Min: 15; Max: 99
Repetition 5: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 33.4; Standard deviation: 11.7
Min: 21; Max: 72
Repetition 6: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 30.3; Standard deviation: 11.8
Min: 18; Max: 75
Repetition 7: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 33.1; Standard deviation: 9.4
Min: 20; Max: 68
Repetition 8: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 33.8; Standard deviation: 11.9
Min: 18; Max: 70
Repetition 9: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 33.8; Standard deviation: 14.2
Min: 17; Max: 81
Repetition 10: Report execution of Threads implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 34.1; Standard deviation: 14.8
Min: 20; Max: 96
Repetition 1: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 368.2; Standard deviation: 1.3
Min: 366; Max: 370
Repetition 2: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 371.0; Standard deviation: 6.6
Min: 360; Max: 377
Repetition 3: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 378.2; Standard deviation: 2.2
Min: 376; Max: 382
Repetition 4: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 377.0; Standard deviation: 4.4
Min: 370; Max: 382
Repetition 5: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 373.8; Standard deviation: 4.5
Min: 365; Max: 377
Repetition 6: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 370.0; Standard deviation: 2.4
Min: 367; Max: 374
Repetition 7: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 378.2; Standard deviation: 2.6
Min: 375; Max: 382
Repetition 8: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 368.2; Standard deviation: 2.6
Min: 365; Max: 373
Repetition 9: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 378.8; Standard deviation: 3.4
Min: 375; Max: 383
Repetition 10: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 372.2; Standard deviation: 2.0
Min: 369; Max: 375
Repetition 1: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 566.0; Standard deviation: 2.3
Min: 563; Max: 569
Repetition 2: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 555.0; Standard deviation: 2.8
Min: 551; Max: 559
Repetition 3: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 560.4; Standard deviation: 3.4
Min: 555; Max: 564
Repetition 4: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 556.4; Standard deviation: 4.2
Min: 551; Max: 562
Repetition 5: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 569.6; Standard deviation: 2.9
Min: 565; Max: 573
Repetition 6: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 561.6; Standard deviation: 5.2
Min: 554; Max: 567
Repetition 7: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 568.0; Standard deviation: 1.5
Min: 567; Max: 571
Repetition 8: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 564.8; Standard deviation: 2.0
Min: 562; Max: 568
Repetition 9: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 563.2; Standard deviation: 5.0
Min: 555; Max: 570
Repetition 10: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 559.0; Standard deviation: 4.1
Min: 554; Max: 566
Repetition 1: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 375.8; Standard deviation: 4.0
Min: 370; Max: 382
Repetition 2: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 378.0; Standard deviation: 1.4
Min: 376; Max: 380
Repetition 3: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 381.4; Standard deviation: 1.2
Min: 380; Max: 383
Repetition 4: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 379.0; Standard deviation: 3.3
Min: 375; Max: 382
Repetition 5: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 376.2; Standard deviation: 3.6
Min: 372; Max: 381
Repetition 6: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 378.2; Standard deviation: 1.8
Min: 376; Max: 380
Repetition 7: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 379.0; Standard deviation: 5.7
Min: 372; Max: 384
Repetition 8: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 375.0; Standard deviation: 1.9
Min: 372; Max: 377
Repetition 9: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 371.4; Standard deviation: 2.3
Min: 367; Max: 373
Repetition 10: Report execution of ThreadPool implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 373.8; Standard deviation: 1.9
Min: 371; Max: 376
Repetition 1: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 153.5; Standard deviation: 4.2
Min: 147; Max: 163
Repetition 2: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 154.4; Standard deviation: 4.9
Min: 149; Max: 166
Repetition 3: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 152.5; Standard deviation: 5.1
Min: 145; Max: 163
Repetition 4: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 161.2; Standard deviation: 5.5
Min: 151; Max: 168
Repetition 5: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 158.2; Standard deviation: 4.5
Min: 151; Max: 166
Repetition 6: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 163.8; Standard deviation: 2.9
Min: 160; Max: 169
Repetition 7: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 153.1; Standard deviation: 4.8
Min: 144; Max: 160
Repetition 8: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 153.2; Standard deviation: 3.4
Min: 149; Max: 159
Repetition 9: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 159.8; Standard deviation: 4.2
Min: 152; Max: 167
Repetition 10: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 151.1; Standard deviation: 4.1
Min: 144; Max: 158
Repetition 1: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 236.5; Standard deviation: 6.9
Min: 226; Max: 251
Repetition 2: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 234.0; Standard deviation: 5.0
Min: 223; Max: 242
Repetition 3: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 237.5; Standard deviation: 6.7
Min: 225; Max: 248
Repetition 4: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 235.4; Standard deviation: 3.9
Min: 229; Max: 242
Repetition 5: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 236.8; Standard deviation: 5.1
Min: 228; Max: 244
Repetition 6: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 244.1; Standard deviation: 6.9
Min: 233; Max: 254
Repetition 7: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 241.4; Standard deviation: 6.9
Min: 232; Max: 255
Repetition 8: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 231.7; Standard deviation: 6.6
Min: 220; Max: 242
Repetition 9: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 241.2; Standard deviation: 4.7
Min: 235; Max: 248
Repetition 10: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 239.9; Standard deviation: 7.9
Min: 229; Max: 252
Repetition 1: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 159.1; Standard deviation: 5.5
Min: 152; Max: 172
Repetition 2: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 165.5; Standard deviation: 3.8
Min: 159; Max: 172
Repetition 3: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 161.7; Standard deviation: 4.8
Min: 156; Max: 170
Repetition 4: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 154.3; Standard deviation: 5.5
Min: 147; Max: 166
Repetition 5: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 158.5; Standard deviation: 5.4
Min: 145; Max: 165
Repetition 6: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 161.6; Standard deviation: 4.2
Min: 155; Max: 168
Repetition 7: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 150.4; Standard deviation: 6.9
Min: 140; Max: 163
Repetition 8: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 161.9; Standard deviation: 4.3
Min: 153; Max: 168
Repetition 9: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 162.7; Standard deviation: 6.3
Min: 153; Max: 174
Repetition 10: Report execution of ThreadPool implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 160.5; Standard deviation: 3.7
Min: 152; Max: 167
Repetition 1: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 33.3; Standard deviation: 18.7
Min: 15; Max: 96
Repetition 2: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 34.5; Standard deviation: 13.9
Min: 19; Max: 85
Repetition 3: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 33.9; Standard deviation: 11.2
Min: 21; Max: 75
Repetition 4: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 32.4; Standard deviation: 11.7
Min: 20; Max: 72
Repetition 5: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 29.9; Standard deviation: 13.2
Min: 17; Max: 81
Repetition 6: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 30.8; Standard deviation: 10.2
Min: 19; Max: 65
Repetition 7: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 33.1; Standard deviation: 8.4
Min: 22; Max: 58
Repetition 8: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 33.8; Standard deviation: 11.5
Min: 19; Max: 69
Repetition 9: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 33.8; Standard deviation: 12.6
Min: 20; Max: 76
Repetition 10: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 35.4; Standard deviation: 15.7
Min: 19; Max: 81
Repetition 1: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 48.4; Standard deviation: 29.9
Min: 21; Max: 160
Repetition 2: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 47.1; Standard deviation: 8.7
Min: 29; Max: 76
Repetition 3: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 46.9; Standard deviation: 16.0
Min: 24; Max: 99
Repetition 4: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 44.8; Standard deviation: 9.3
Min: 31; Max: 78
Repetition 5: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 38.6; Standard deviation: 5.3
Min: 26; Max: 49
Repetition 6: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 42.4; Standard deviation: 8.1
Min: 31; Max: 72
Repetition 7: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 46.3; Standard deviation: 9.4
Min: 33; Max: 74
Repetition 8: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 45.4; Standard deviation: 9.9
Min: 35; Max: 79
Repetition 9: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 44.9; Standard deviation: 13.1
Min: 28; Max: 89
Repetition 10: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 46.7; Standard deviation: 10.9
Min: 27; Max: 77
Repetition 1: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 30.6; Standard deviation: 6.3
Min: 22; Max: 52
Repetition 2: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 33.2; Standard deviation: 11.9
Min: 21; Max: 78
Repetition 3: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 34.2; Standard deviation: 9.7
Min: 22; Max: 64
Repetition 4: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 34.6; Standard deviation: 11.4
Min: 20; Max: 70
Repetition 5: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 34.1; Standard deviation: 13.9
Min: 18; Max: 69
Repetition 6: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 31.8; Standard deviation: 10.2
Min: 22; Max: 73
Repetition 7: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 32.7; Standard deviation: 11.9
Min: 20; Max: 78
Repetition 8: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 32.8; Standard deviation: 13.8
Min: 18; Max: 89
Repetition 9: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 36.5; Standard deviation: 14.9
Min: 23; Max: 85
Repetition 10: Report execution of ThreadPool implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 34.7; Standard deviation: 16.6
Min: 17; Max: 92
Repetition 1: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 351.8; Standard deviation: 4.7
Min: 348; Max: 361
Repetition 2: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 374.8; Standard deviation: 3.8
Min: 368; Max: 379
Repetition 3: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 376.6; Standard deviation: 1.2
Min: 375; Max: 378
Repetition 4: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 371.8; Standard deviation: 2.3
Min: 369; Max: 376
Repetition 5: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 372.2; Standard deviation: 4.4
Min: 367; Max: 378
Repetition 6: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 375.2; Standard deviation: 2.1
Min: 372; Max: 378
Repetition 7: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 367.0; Standard deviation: 2.6
Min: 365; Max: 372
Repetition 8: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 370.2; Standard deviation: 2.7
Min: 366; Max: 373
Repetition 9: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 376.0; Standard deviation: 3.7
Min: 371; Max: 379
Repetition 10: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 371.8; Standard deviation: 3.5
Min: 366; Max: 376
Repetition 1: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 564.6; Standard deviation: 4.1
Min: 557; Max: 569
Repetition 2: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 562.8; Standard deviation: 2.1
Min: 559; Max: 565
Repetition 3: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 563.6; Standard deviation: 7.6
Min: 554; Max: 575
Repetition 4: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 560.0; Standard deviation: 5.2
Min: 554; Max: 567
Repetition 5: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 563.6; Standard deviation: 1.7
Min: 561; Max: 566
Repetition 6: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 557.2; Standard deviation: 2.7
Min: 554; Max: 562
Repetition 7: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 567.8; Standard deviation: 3.2
Min: 563; Max: 573
Repetition 8: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 559.8; Standard deviation: 1.2
Min: 558; Max: 561
Repetition 9: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 540.0; Standard deviation: 5.7
Min: 532; Max: 547
Repetition 10: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 552.0; Standard deviation: 5.3
Min: 545; Max: 557
Repetition 1: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 373.4; Standard deviation: 3.0
Min: 370; Max: 377
Repetition 2: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 373.6; Standard deviation: 2.2
Min: 372; Max: 378
Repetition 3: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 370.4; Standard deviation: 2.0
Min: 368; Max: 374
Repetition 4: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 372.0; Standard deviation: 1.4
Min: 370; Max: 374
Repetition 5: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 375.2; Standard deviation: 2.9
Min: 372; Max: 380
Repetition 6: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 378.0; Standard deviation: 4.3
Min: 371; Max: 382
Repetition 7: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 364.4; Standard deviation: 3.6
Min: 360; Max: 370
Repetition 8: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 367.4; Standard deviation: 1.9
Min: 364; Max: 369
Repetition 9: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 367.6; Standard deviation: 4.6
Min: 360; Max: 372
Repetition 10: Report execution of HaMeR framework implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 369.0; Standard deviation: 1.1
Min: 367; Max: 370
Repetition 1: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 140.9; Standard deviation: 6.6
Min: 129; Max: 155
Repetition 2: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 163.8; Standard deviation: 3.1
Min: 156; Max: 169
Repetition 3: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 159.7; Standard deviation: 3.9
Min: 150; Max: 165
Repetition 4: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 162.6; Standard deviation: 5.5
Min: 154; Max: 173
Repetition 5: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 159.5; Standard deviation: 5.6
Min: 150; Max: 167
Repetition 6: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 163.0; Standard deviation: 4.1
Min: 158; Max: 169
Repetition 7: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 161.5; Standard deviation: 4.3
Min: 154; Max: 171
Repetition 8: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 156.4; Standard deviation: 4.2
Min: 148; Max: 163
Repetition 9: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 168.8; Standard deviation: 4.9
Min: 162; Max: 177
Repetition 10: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 150.8; Standard deviation: 2.9
Min: 146; Max: 155
Repetition 1: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 232.4; Standard deviation: 4.5
Min: 226; Max: 239
Repetition 2: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 247.5; Standard deviation: 5.7
Min: 238; Max: 255
Repetition 3: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 227.5; Standard deviation: 6.9
Min: 220; Max: 242
Repetition 4: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 236.5; Standard deviation: 7.1
Min: 218; Max: 244
Repetition 5: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 236.1; Standard deviation: 3.7
Min: 229; Max: 242
Repetition 6: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 232.4; Standard deviation: 5.3
Min: 220; Max: 240
Repetition 7: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 244.5; Standard deviation: 6.9
Min: 232; Max: 259
Repetition 8: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 238.6; Standard deviation: 7.4
Min: 225; Max: 250
Repetition 9: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 244.8; Standard deviation: 4.6
Min: 235; Max: 251
Repetition 10: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 235.2; Standard deviation: 4.7
Min: 226; Max: 243
Repetition 1: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 163.5; Standard deviation: 4.8
Min: 156; Max: 171
Repetition 2: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 151.1; Standard deviation: 3.8
Min: 146; Max: 160
Repetition 3: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 147.6; Standard deviation: 5.0
Min: 139; Max: 154
Repetition 4: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 155.5; Standard deviation: 4.1
Min: 146; Max: 160
Repetition 5: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 157.8; Standard deviation: 4.0
Min: 151; Max: 164
Repetition 6: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 161.6; Standard deviation: 3.8
Min: 156; Max: 169
Repetition 7: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 158.6; Standard deviation: 4.9
Min: 151; Max: 168
Repetition 8: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 150.7; Standard deviation: 4.9
Min: 141; Max: 156
Repetition 9: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 158.1; Standard deviation: 4.7
Min: 149; Max: 166
Repetition 10: Report execution of HaMeR framework implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 153.0; Standard deviation: 3.4
Min: 147; Max: 159
Repetition 1: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 26.3; Standard deviation: 5.0
Min: 14; Max: 37
Repetition 2: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 27.4; Standard deviation: 3.2
Min: 19; Max: 33
Repetition 3: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 27.7; Standard deviation: 5.0
Min: 17; Max: 37
Repetition 4: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 28.5; Standard deviation: 4.0
Min: 22; Max: 42
Repetition 5: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 26.7; Standard deviation: 3.6
Min: 20; Max: 36
Repetition 6: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 25.7; Standard deviation: 4.3
Min: 17; Max: 39
Repetition 7: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 28.3; Standard deviation: 6.4
Min: 17; Max: 50
Repetition 8: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 28.4; Standard deviation: 6.3
Min: 18; Max: 45
Repetition 9: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 27.0; Standard deviation: 4.6
Min: 16; Max: 42
Repetition 10: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 26.6; Standard deviation: 3.7
Min: 20; Max: 34
Repetition 1: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 40.5; Standard deviation: 5.8
Min: 31; Max: 55
Repetition 2: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 43.1; Standard deviation: 5.0
Min: 31; Max: 55
Repetition 3: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 38.8; Standard deviation: 5.2
Min: 28; Max: 54
Repetition 4: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 41.8; Standard deviation: 6.4
Min: 20; Max: 57
Repetition 5: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 38.7; Standard deviation: 4.1
Min: 26; Max: 46
Repetition 6: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 40.1; Standard deviation: 5.4
Min: 30; Max: 57
Repetition 7: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 38.0; Standard deviation: 5.3
Min: 26; Max: 47
Repetition 8: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 42.6; Standard deviation: 4.5
Min: 33; Max: 53
Repetition 9: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 41.8; Standard deviation: 5.1
Min: 30; Max: 53
Repetition 10: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 41.5; Standard deviation: 5.2
Min: 32; Max: 53
Repetition 1: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 28.8; Standard deviation: 7.7
Min: 17; Max: 56
Repetition 2: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 28.8; Standard deviation: 4.4
Min: 21; Max: 41
Repetition 3: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 28.9; Standard deviation: 4.6
Min: 18; Max: 39
Repetition 4: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 27.4; Standard deviation: 4.3
Min: 19; Max: 39
Repetition 5: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 29.8; Standard deviation: 4.1
Min: 20; Max: 40
Repetition 6: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 27.1; Standard deviation: 3.9
Min: 20; Max: 36
Repetition 7: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 25.7; Standard deviation: 11.5
Min: 13; Max: 71
Repetition 8: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 26.8; Standard deviation: 4.2
Min: 16; Max: 36
Repetition 9: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 26.7; Standard deviation: 3.8
Min: 19; Max: 35
Repetition 10: Report execution of HaMeR framework implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 26.5; Standard deviation: 8.6
Min: 13; Max: 45
Repetition 1: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 554.6; Standard deviation: 1.9
Min: 552; Max: 557
Repetition 2: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 554.6; Standard deviation: 1.6
Min: 553; Max: 557
Repetition 3: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 557.6; Standard deviation: 1.6
Min: 556; Max: 560
Repetition 4: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 561.8; Standard deviation: 2.5
Min: 557; Max: 564
Repetition 5: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 559.8; Standard deviation: 3.9
Min: 553; Max: 564
Repetition 6: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 554.8; Standard deviation: 4.3
Min: 547; Max: 560
Repetition 7: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 553.8; Standard deviation: 2.2
Min: 550; Max: 556
Repetition 8: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 555.6; Standard deviation: 4.5
Min: 548; Max: 560
Repetition 9: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 552.0; Standard deviation: 3.5
Min: 548; Max: 557
Repetition 10: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 553.6; Standard deviation: 5.4
Min: 549; Max: 562
Repetition 1: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 4121.6; Standard deviation: 1866.7
Min: 538; Max: 5884
Repetition 2: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 4143.6; Standard deviation: 1908.9
Min: 532; Max: 5885
Repetition 3: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 4061.2; Standard deviation: 1884.4
Min: 541; Max: 5953
Repetition 4: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 3952.8; Standard deviation: 1779.6
Min: 541; Max: 5525
Repetition 5: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 3894.6; Standard deviation: 1797.8
Min: 533; Max: 5747
Repetition 6: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 3781.0; Standard deviation: 1794.0
Min: 525; Max: 5567
Repetition 7: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 4010.2; Standard deviation: 1777.6
Min: 549; Max: 5414
Repetition 8: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 4032.8; Standard deviation: 1875.7
Min: 526; Max: 5701
Repetition 9: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 3981.8; Standard deviation: 1819.4
Min: 536; Max: 5751
Repetition 10: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 3976.6; Standard deviation: 1827.7
Min: 538; Max: 5643
Repetition 1: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 557.8; Standard deviation: 1.9
Min: 556; Max: 561
Repetition 2: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 559.0; Standard deviation: 4.0
Min: 553; Max: 565
Repetition 3: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 561.0; Standard deviation: 3.9
Min: 556; Max: 566
Repetition 4: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 556.8; Standard deviation: 3.8
Min: 552; Max: 561
Repetition 5: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 553.6; Standard deviation: 4.6
Min: 547; Max: 559
Repetition 6: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 558.0; Standard deviation: 1.4
Min: 556; Max: 560
Repetition 7: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 549.6; Standard deviation: 3.6
Min: 543; Max: 553
Repetition 8: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 551.6; Standard deviation: 2.2
Min: 549; Max: 554
Repetition 9: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 554.0; Standard deviation: 5.2
Min: 548; Max: 562
Repetition 10: Report execution of Kotlin coroutines implementation, with 5 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 552.4; Standard deviation: 4.3
Min: 547; Max: 559
Repetition 1: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 237.9; Standard deviation: 8.2
Min: 222; Max: 250
Repetition 2: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 238.2; Standard deviation: 5.7
Min: 226; Max: 247
Repetition 3: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 233.8; Standard deviation: 4.0
Min: 225; Max: 243
Repetition 4: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 231.6; Standard deviation: 6.3
Min: 224; Max: 245
Repetition 5: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 234.0; Standard deviation: 5.6
Min: 227; Max: 242
Repetition 6: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 222.3; Standard deviation: 6.6
Min: 212; Max: 234
Repetition 7: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 232.1; Standard deviation: 5.9
Min: 222; Max: 244
Repetition 8: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 236.9; Standard deviation: 6.5
Min: 226; Max: 248
Repetition 9: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 233.6; Standard deviation: 5.4
Min: 224; Max: 243
Repetition 10: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 234.6; Standard deviation: 6.0
Min: 226; Max: 246
Repetition 1: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 3224.5; Standard deviation: 920.9
Min: 443; Max: 4276
Repetition 2: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 3300.5; Standard deviation: 918.9
Min: 462; Max: 4085
Repetition 3: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 3313.3; Standard deviation: 935.8
Min: 442; Max: 4197
Repetition 4: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 3316.1; Standard deviation: 940.8
Min: 443; Max: 4164
Repetition 5: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 3340.7; Standard deviation: 940.8
Min: 461; Max: 4215
Repetition 6: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 3303.6; Standard deviation: 942.5
Min: 452; Max: 4374
Repetition 7: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 3381.4; Standard deviation: 968.8
Min: 452; Max: 4487
Repetition 8: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 3306.5; Standard deviation: 930.9
Min: 464; Max: 4225
Repetition 9: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 3304.5; Standard deviation: 922.8
Min: 447; Max: 4069
Repetition 10: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 3248.7; Standard deviation: 898.9
Min: 454; Max: 3916
Repetition 1: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 240.6; Standard deviation: 3.0
Min: 233; Max: 244
Repetition 2: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 229.2; Standard deviation: 3.8
Min: 224; Max: 236
Repetition 3: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 224.5; Standard deviation: 6.5
Min: 218; Max: 241
Repetition 4: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 232.5; Standard deviation: 4.5
Min: 223; Max: 239
Repetition 5: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 224.5; Standard deviation: 4.5
Min: 213; Max: 229
Repetition 6: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 210.5; Standard deviation: 4.6
Min: 205; Max: 221
Repetition 7: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 240.6; Standard deviation: 6.9
Min: 227; Max: 253
Repetition 8: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 237.5; Standard deviation: 5.7
Min: 229; Max: 249
Repetition 9: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 231.6; Standard deviation: 5.4
Min: 220; Max: 240
Repetition 10: Report execution of Kotlin coroutines implementation, with 11 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 241.5; Standard deviation: 5.3
Min: 233; Max: 250
Repetition 1: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 48.6; Standard deviation: 10.5
Min: 29; Max: 86
Repetition 2: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 48.8; Standard deviation: 11.6
Min: 35; Max: 96
Repetition 3: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 49.7; Standard deviation: 16.1
Min: 32; Max: 113
Repetition 4: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 52.9; Standard deviation: 18.9
Min: 34; Max: 124
Repetition 5: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 46.1; Standard deviation: 30.5
Min: 14; Max: 165
Repetition 6: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 49.7; Standard deviation: 14.6
Min: 34; Max: 98
Repetition 7: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 46.6; Standard deviation: 14.2
Min: 25; Max: 108
Repetition 8: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 47.8; Standard deviation: 13.6
Min: 35; Max: 101
Repetition 9: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 46.9; Standard deviation: 11.9
Min: 32; Max: 100
Repetition 10: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Semaphore to synchronize
Average executions: 46.0; Standard deviation: 15.8
Min: 31; Max: 112
Repetition 1: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 874.5; Standard deviation: 157.9
Min: 99; Max: 1426
Repetition 2: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 857.8; Standard deviation: 146.3
Min: 119; Max: 1235
Repetition 3: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 903.6; Standard deviation: 171.2
Min: 120; Max: 1397
Repetition 4: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 851.2; Standard deviation: 153.0
Min: 112; Max: 1174
Repetition 5: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 845.9; Standard deviation: 144.6
Min: 117; Max: 1127
Repetition 6: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 754.8; Standard deviation: 124.3
Min: 106; Max: 976
Repetition 7: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 739.0; Standard deviation: 182.8
Min: 85; Max: 1278
Repetition 8: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 877.2; Standard deviation: 162.6
Min: 110; Max: 1208
Repetition 9: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 881.4; Standard deviation: 160.1
Min: 117; Max: 1392
Repetition 10: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Synchronized to synchronize
Average executions: 846.4; Standard deviation: 152.9
Min: 124; Max: 1355
Repetition 1: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 50.8; Standard deviation: 17.1
Min: 36; Max: 106
Repetition 2: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 45.3; Standard deviation: 8.8
Min: 34; Max: 81
Repetition 3: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 47.8; Standard deviation: 7.6
Min: 32; Max: 81
Repetition 4: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 45.3; Standard deviation: 8.2
Min: 31; Max: 72
Repetition 5: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 43.9; Standard deviation: 7.9
Min: 30; Max: 74
Repetition 6: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 44.0; Standard deviation: 37.6
Min: 10; Max: 170
Repetition 7: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 45.5; Standard deviation: 13.9
Min: 30; Max: 107
Repetition 8: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 54.1; Standard deviation: 56.1
Min: 11; Max: 237
Repetition 9: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 49.5; Standard deviation: 23.7
Min: 15; Max: 122
Repetition 10: Report execution of Kotlin coroutines implementation, with 51 philosophers, running by 2 seconds using Lock and Condition to synchronize
Average executions: 46.4; Standard deviation: 16.4
Min: 34; Max: 144
====================================================================================================
